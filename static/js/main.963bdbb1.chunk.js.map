{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["LuckCalculator","setOptions","options","sparse","j","generateRandom","k","state","luckyNumber","correctoption","Math","floor","random","splice","console","log","setState","generateLuckFactor","luckyAttempts","resetData","show","handleClick","key","a","async","wrongAttempts","prevState","setTimeout","isCompleted","optionOne","optionTwo","optionThree","numberOfAttempts","randomNumber","this","className","Jumbotron","Modal","isOpen","ModalBody","Button","color","disabled","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.963bdbb1.chunk.js","sourcesContent":["import React from 'react'\nimport { Button, Jumbotron, Modal, ModalBody } from 'reactstrap'\nimport './index.css'\n\nexport default class LuckCalculator extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      optionOne: null,\n      optionTwo: null,\n      optionThree: null,\n      luckyNumber: null,\n      numberOfAttempts: 0,\n      luckyAttempts: 0,\n      wrongAttempts: 0,\n      isCompleted: false,\n      randomNumber: false,\n      show: false\n    }\n\n  }\n  setOptions = () => {\n    const options = ['optionOne', 'optionTwo', 'optionThree']\n    let sparse = [...options]\n    let j = this.generateRandom(), k = this.generateRandom(); //j72 k85\n\n    while (j === this.state.luckyNumber || k === this.state.luckyNumber) {\n      if (j === this.state.luckyNumber) {\n        j = this.generateRandom() //72\n      } else {\n        k = this.generateRandom()\n      }\n\n    }\n    let correctoption = Math.floor(Math.random() * 3);// 0\n    sparse.splice(correctoption, 1) //[]\n    console.log(sparse)\n    this.setState({\n      [options[correctoption]]: this.state.luckyNumber, // optionOne: 72\n      [sparse[0]]: j, // optionTwo: 72\n      [sparse[1]]: k, //optionThree: 85\n    })\n\n  }\n\n  componentDidMount() {\n    this.setState({ luckyNumber: this.generateRandom() }, () => {     //72\n      this.setOptions()\n    })\n\n\n  }\n\n  generateRandom = () => {\n    return Math.floor(Math.random() * 100);\n\n  }\n\n  generateLuckFactor = () => {\n\n    if (this.state.luckyAttempts >= 0 && this.state.luckyAttempts <= 3) {\n      return (\n        <h3>Bad Luck</h3>\n      )\n    } else if (this.state.luckyAttempts >= 4 && this.state.luckyAttempts <= 7) {\n      return (\n        <h3>Good Luck</h3>\n      )\n    } else if (this.state.luckyAttempts >= 7) {\n      return (\n        <h3>Excellent Luck</h3>\n      )\n    }\n    return null\n\n  }\n\n  resetData = () => {\n    this.setState({\n      show: false,\n      luckyNumber: this.generateRandom()\n    }, () => {\n      this.setOptions()\n    })\n  }\n\n\n  handleClick = async (key) => {\n    if (this.state.luckyAttempts + this.state.wrongAttempts < 10) {\n      console.log('key', key)\n      await this.setState({ show: !this.state.show })\n      if (this.state[key] === this.state.luckyNumber) {\n        this.setState(prevState => ({\n          luckyAttempts: prevState.luckyAttempts + 1,\n\n        }))\n      } else {\n        this.setState(prevState => ({\n          wrongAttempts: prevState.wrongAttempts + 1\n        }))\n\n      }\n\n      setTimeout(() => {\n        this.resetData()\n      }, 1200)\n\n    }\n    if (this.state.luckyAttempts + this.state.wrongAttempts === 10) {\n      this.setState({ isCompleted: true })\n    }\n\n\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <Jumbotron className=\"border border-dark\" >\n          <h2 className=\"header\">Luck Factor</h2><hr className=\"border-dark \" />\n          <div className=\"btndiv\"><h3 >{this.state.luckyNumber}</h3>\n          </div>\n\n          <p>Attempts: {this.state.luckyAttempts + this.state.wrongAttempts}/10 </p>\n          <p className=\"attempts1\">Lucky attempts: {this.state.luckyAttempts}</p>\n          <p className=\"attempts2\">Wrong attempts: {this.state.wrongAttempts}</p>\n\n          {this.state.isCompleted &&\n            <Modal isOpen={true}>\n              <ModalBody>\n                {this.generateLuckFactor()}\n              </ModalBody>\n            </Modal>\n          }\n          <div className=\"btndiv\">\n            <Button color=\"btn btn-success\" className=\"border border-dark mr-4 btnn\" disabled={this.state.show} onClick={() => this.handleClick('optionOne')}>{this.state.show ? this.state.optionOne : \"?\"}</Button>\n            <Button color=\"btn btn-success\" className=\"border border-dark mr-4 btnn\" disabled={this.state.show} onClick={() => this.handleClick('optionTwo')}>{this.state.show ? this.state.optionTwo : \"?\"}</Button>\n            <Button color=\"btn btn-success\" className=\"border border-dark btnn\" disabled={this.state.show} onClick={() => this.handleClick('optionThree')}>{this.state.show ? this.state.optionThree : \"?\"}</Button><br />\n          </div>\n        </Jumbotron>\n      </div >\n\n    )\n\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport LuckCalculator from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<LuckCalculator />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}